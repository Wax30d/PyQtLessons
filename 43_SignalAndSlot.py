import sys
from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import (QWidget, QLCDNumber, QSlider,
                             QVBoxLayout, QApplication)

"""
Events in PyQt6
GUI applications are event-driven. 
Events are generated mainly by the user of an application. 
But they can be generated by other means as well; e.g. 
an Internet connection, a window manager, or a timer. 
When we call the application's exec() method, the application enters the main loop. 
The main loop fetches events and sends them to the objects.
"""

"""
In the event model, there are three participants:

    * event source
    * event object
    * event target

The event source is the object whose state changes. 
It generates events. 
The event object (event) encapsulates the state changes in the event source. 
The event target is the object that wants to be notified. 
Event source object delegates the task of handling an event to the event target.

PyQt6 has a unique signal and slot mechanism to deal with events. 
Signals and slots are used for communication between objects. 
A signal is emitted when a particular event occurs. 
A slot can be any Python callable. 
A slot is called when its connected signal is emitted.
"""


# we display a QtGui.QLCDNumber and a QtGui.QSlider.
# We change the lcd number by dragging the slider knob.
class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        lcd = QLCDNumber(self)
        sld = QSlider(Qt.Orientation.Horizontal, self)

        vbox = QVBoxLayout()
        vbox.addWidget(lcd)
        vbox.addWidget(sld)

        self.setLayout(vbox)
        # Here we connect a valueChanged signal of the slider to the display slot of the lcd number.
        sld.valueChanged.connect(lcd.display)

        # The sender is an object that sends a signal.
        # The receiver is the object that receives the signal.
        # The slot is the method that reacts to the signal.
        self.setGeometry(300, 300, 350, 250)
        self.setWindowTitle('Signal and slot')
        self.show()


def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec())


if __name__ == '__main__':
    main()
